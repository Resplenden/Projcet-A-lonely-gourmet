<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="edu.study.mapper.memberMapper">

	<!-- 로그인  -->
	<select id="login" parameterType="memberVo" resultType="memberVo">
		SELECT midx 
			,id
			,name
			,nickname
			,stname
	 		,orgname
			,email
		FROM member
		WHERE id = #{id}
		AND pwd=#{pwd}
		AND delyn = "N"
	</select>
		
	<select id="loginCheck" resultType="int">
		SELECT count(id) as count
		 	FROM member
		 	WHERE id=#{id}
		 	AND pwd=#{pwd}
		 	AND delyn = "N"
	</select>
	

	<!-- 아이디 찾기 -->
	<select id="find_id" parameterType="String" resultType="memberVo">
		SELECT id
			FROM member
			WHERE name = #{name}
			AND email = #{email}
	</select>
	
	<!-- 비밀번호 찾기,  -->
	<select id="selectMember" parameterType="String" resultType="memberVo">
		SELECT 
			id
			,name
			,email
		FROM member					
		WHERE email = #{email}		
	</select>
	 
	<update id = "updatePw" parameterType="memberVo">
		UPDATE member
		SET pwd=#{pwd} 
		WHERE email= #{email}
	</update>
	 	 	 
	 <select id="idCheck" parameterType="String" resultType="int">
		SELECT COUNT(id) 
			FROM member 
			WHERE id= #{id}
	</select>
	
	<select id="nameCheck" parameterType="String" resultType="int">
		SELECT COUNT(name) 
			FROM member 
			WHERE name= #{name}
	</select>
	 
	<select id="emailCheck" parameterType="String" resultType="int">
		SELECT COUNT(email) 
			FROM member 
			WHERE email= #{email}
	</select>	
	
	<select id="nickCheck" parameterType="String" resultType="int">
		SELECT COUNT(nickname) 
			FROM member 
			WHERE nickname= #{nickname}
	</select> 


	<!-- 회원가입 -->
	<insert id="join" parameterType="memberVo">
		<![CDATA[
			INSERT INTO member (
				id
				,pwd
				,name	
				,birth			
				,nickname
				,gender	
				,email				
				,phone
				,orgname
				,stname
				,lvl
				,wdate
				,delyn
				
				) VALUES (
					#{id}
					,#{pwd}
					,#{name}
					,#{birth}
					,#{nickname}		
					,#{gender}
					,#{email}
					,#{phone}
					,#{orgname}
					,#{stname}
					,#{lvl}
					,now()
					,'N'
				)
		]]>	 	
		<selectKey  resultType="int" keyProperty="midx" order="AFTER">
	 	SELECT MAX(midx)
	 		from member
	 	</selectKey>
	</insert>
	

	<!-- 이미지 파일 MemberFileVo에 넣기 -->
	<insert id="fileInsert" parameterType="HashMap">
		INSERT INTO memberfile(
			midx,
			orgfilename,
			storedname
		)VALUES(
			#{midx},
			#{orgfilename},
			#{storedname}
		)
	</insert>
	
	
	 
	 
	 <!-- 회원 정보 조회 -->
	 <select id="profile" parameterType="int" resultType="memberVo">
	 SELECT midx
	 , id
	 , pwd
	 , nickname
	 , name
	 , gender
	 , birth
	 , phone
	 , wdate
	 , stname
	 , email
	 FROM member
	 WHERE midx = #{midx}
	 </select>
	 
	 <select id="file" parameterType="int" resultType="mfileVo">
	 	SELECT
	 		mfidx 
	 		, midx
	 		, orgfilename
	 		, storedname	 		
	 	FROM memberfile	 
	 	WHERE midx=#{midx}
	 </select> 
	 
	 <!-- 회원 정보 수정 -->
	 <update id="profileModify" parameterType="memberVo">
		UPDATE member
		SET nickname = #{nickname}
		, stname = #{stname}
		, birth = #{birth}
		, phone = #{phone}
		, email = #{email}
		WHERE midx = #{midx}	 
	 </update>
	 
	 <!-- 회원 사진 수정 -->
	 <update id="fileUpdate" parameterType="HashMap">
		UPDATE memberfile 
		SET orgfilename = #{orgfilename}
			, storedname = #{storedname}
		WHERE midx = #{midx}
	</update>
	
	<!-- 회원 탈퇴 -->
	<update id="unregister" parameterType="memberVo">
	UPDATE member
	SET delyn = 'Y'
	WHERE midx = #{midx}
	</update>
</mapper>